/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

// Prevent multiple inclusion
#pragma once

#include <app-common/zap-generated/ids/Clusters.h>
#include <app-common/zap-generated/ids/Commands.h>

#include <controller/CHIPCluster.h>
#include <lib/core/CHIPCallback.h>
#include <lib/support/Span.h>

namespace chip {
namespace Controller {

class DLL_EXPORT AccountLoginCluster : public ClusterBase
{
public:
    AccountLoginCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::AccountLogin::Id, endpoint)
    {}
    // AccountLoginCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::AccountLogin::Id, endpoint) {}
    ~AccountLoginCluster() {}
};

class DLL_EXPORT ApplicationBasicCluster : public ClusterBase
{
public:
    ApplicationBasicCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::ApplicationBasic::Id,
                    endpoint)
    {}
    // ApplicationBasicCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::ApplicationBasic::Id, endpoint) {}
    ~ApplicationBasicCluster() {}
};

class DLL_EXPORT ApplicationLauncherCluster : public ClusterBase
{
public:
    ApplicationLauncherCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::ApplicationLauncher::Id,
                    endpoint)
    {}
    // ApplicationLauncherCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint)
    // : ClusterBase(exchangeManager, session, app::Clusters::ApplicationLauncher::Id, endpoint) {}
    ~ApplicationLauncherCluster() {}
};

class DLL_EXPORT AudioOutputCluster : public ClusterBase
{
public:
    AudioOutputCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::AudioOutput::Id, endpoint)
    {}
    // AudioOutputCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::AudioOutput::Id, endpoint) {}
    ~AudioOutputCluster() {}
};

class DLL_EXPORT ChannelCluster : public ClusterBase
{
public:
    ChannelCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::Channel::Id, endpoint)
    {}
    // ChannelCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::Channel::Id, endpoint) {}
    ~ChannelCluster() {}
};

class DLL_EXPORT ContentLauncherCluster : public ClusterBase
{
public:
    ContentLauncherCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::ContentLauncher::Id, endpoint)
    {}
    // ContentLauncherCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::ContentLauncher::Id, endpoint) {}
    ~ContentLauncherCluster() {}
};

class DLL_EXPORT DescriptorCluster : public ClusterBase
{
public:
    DescriptorCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::Descriptor::Id, endpoint)
    {}
    // DescriptorCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::Descriptor::Id, endpoint) {}
    ~DescriptorCluster() {}
};

class DLL_EXPORT KeypadInputCluster : public ClusterBase
{
public:
    KeypadInputCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::KeypadInput::Id, endpoint)
    {}
    // KeypadInputCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::KeypadInput::Id, endpoint) {}
    ~KeypadInputCluster() {}
};

class DLL_EXPORT LevelControlCluster : public ClusterBase
{
public:
    LevelControlCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::LevelControl::Id, endpoint)
    {}
    // LevelControlCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::LevelControl::Id, endpoint) {}
    ~LevelControlCluster() {}
};

class DLL_EXPORT MediaInputCluster : public ClusterBase
{
public:
    MediaInputCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::MediaInput::Id, endpoint)
    {}
    // MediaInputCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::MediaInput::Id, endpoint) {}
    ~MediaInputCluster() {}
};

class DLL_EXPORT MediaPlaybackCluster : public ClusterBase
{
public:
    MediaPlaybackCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::MediaPlayback::Id, endpoint)
    {}
    // MediaPlaybackCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::MediaPlayback::Id, endpoint) {}
    ~MediaPlaybackCluster() {}
};

class DLL_EXPORT OnOffCluster : public ClusterBase
{
public:
    OnOffCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::OnOff::Id, endpoint)
    {}
    // OnOffCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::OnOff::Id, endpoint) {}
    ~OnOffCluster() {}
};

class DLL_EXPORT TargetNavigatorCluster : public ClusterBase
{
public:
    TargetNavigatorCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::TargetNavigator::Id, endpoint)
    {}
    // TargetNavigatorCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::TargetNavigator::Id, endpoint) {}
    ~TargetNavigatorCluster() {}
};

} // namespace Controller
} // namespace chip
