/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

// Prevent multiple inclusion
#pragma once

#include <app-common/zap-generated/ids/Clusters.h>
#include <app-common/zap-generated/ids/Commands.h>

#include <controller/CHIPCluster.h>
#include <lib/core/CHIPCallback.h>
#include <lib/support/Span.h>

namespace chip {
namespace Controller {

class DLL_EXPORT AccessControlCluster : public ClusterBase
{
public:
    AccessControlCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::AccessControl::Id, endpoint)
    {}
    // AccessControlCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::AccessControl::Id, endpoint) {}
    ~AccessControlCluster() {}
};

class DLL_EXPORT AccountLoginCluster : public ClusterBase
{
public:
    AccountLoginCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::AccountLogin::Id, endpoint)
    {}
    // AccountLoginCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::AccountLogin::Id, endpoint) {}
    ~AccountLoginCluster() {}
};

class DLL_EXPORT AdministratorCommissioningCluster : public ClusterBase
{
public:
    AdministratorCommissioningCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(),
                    app::Clusters::AdministratorCommissioning::Id, endpoint)
    {}
    // AdministratorCommissioningCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::AdministratorCommissioning::Id, endpoint) {}
    ~AdministratorCommissioningCluster() {}
};

class DLL_EXPORT ApplicationBasicCluster : public ClusterBase
{
public:
    ApplicationBasicCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::ApplicationBasic::Id,
                    endpoint)
    {}
    // ApplicationBasicCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::ApplicationBasic::Id, endpoint) {}
    ~ApplicationBasicCluster() {}
};

class DLL_EXPORT ApplicationLauncherCluster : public ClusterBase
{
public:
    ApplicationLauncherCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::ApplicationLauncher::Id,
                    endpoint)
    {}
    // ApplicationLauncherCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint)
    // : ClusterBase(exchangeManager, session, app::Clusters::ApplicationLauncher::Id, endpoint) {}
    ~ApplicationLauncherCluster() {}
};

class DLL_EXPORT AudioOutputCluster : public ClusterBase
{
public:
    AudioOutputCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::AudioOutput::Id, endpoint)
    {}
    // AudioOutputCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::AudioOutput::Id, endpoint) {}
    ~AudioOutputCluster() {}
};

class DLL_EXPORT BarrierControlCluster : public ClusterBase
{
public:
    BarrierControlCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::BarrierControl::Id, endpoint)
    {}
    // BarrierControlCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::BarrierControl::Id, endpoint) {}
    ~BarrierControlCluster() {}
};

class DLL_EXPORT BasicCluster : public ClusterBase
{
public:
    BasicCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::Basic::Id, endpoint)
    {}
    // BasicCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::Basic::Id, endpoint) {}
    ~BasicCluster() {}
};

class DLL_EXPORT BinaryInputBasicCluster : public ClusterBase
{
public:
    BinaryInputBasicCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::BinaryInputBasic::Id,
                    endpoint)
    {}
    // BinaryInputBasicCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::BinaryInputBasic::Id, endpoint) {}
    ~BinaryInputBasicCluster() {}
};

class DLL_EXPORT BindingCluster : public ClusterBase
{
public:
    BindingCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::Binding::Id, endpoint)
    {}
    // BindingCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::Binding::Id, endpoint) {}
    ~BindingCluster() {}
};

class DLL_EXPORT BooleanStateCluster : public ClusterBase
{
public:
    BooleanStateCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::BooleanState::Id, endpoint)
    {}
    // BooleanStateCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::BooleanState::Id, endpoint) {}
    ~BooleanStateCluster() {}
};

class DLL_EXPORT BridgedActionsCluster : public ClusterBase
{
public:
    BridgedActionsCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::BridgedActions::Id, endpoint)
    {}
    // BridgedActionsCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::BridgedActions::Id, endpoint) {}
    ~BridgedActionsCluster() {}
};

class DLL_EXPORT BridgedDeviceBasicCluster : public ClusterBase
{
public:
    BridgedDeviceBasicCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::BridgedDeviceBasic::Id,
                    endpoint)
    {}
    // BridgedDeviceBasicCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::BridgedDeviceBasic::Id, endpoint) {}
    ~BridgedDeviceBasicCluster() {}
};

class DLL_EXPORT ChannelCluster : public ClusterBase
{
public:
    ChannelCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::Channel::Id, endpoint)
    {}
    // ChannelCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::Channel::Id, endpoint) {}
    ~ChannelCluster() {}
};

class DLL_EXPORT ColorControlCluster : public ClusterBase
{
public:
    ColorControlCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::ColorControl::Id, endpoint)
    {}
    // ColorControlCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::ColorControl::Id, endpoint) {}
    ~ColorControlCluster() {}
};

class DLL_EXPORT ContentLauncherCluster : public ClusterBase
{
public:
    ContentLauncherCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::ContentLauncher::Id, endpoint)
    {}
    // ContentLauncherCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::ContentLauncher::Id, endpoint) {}
    ~ContentLauncherCluster() {}
};

class DLL_EXPORT DescriptorCluster : public ClusterBase
{
public:
    DescriptorCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::Descriptor::Id, endpoint)
    {}
    // DescriptorCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::Descriptor::Id, endpoint) {}
    ~DescriptorCluster() {}
};

class DLL_EXPORT DiagnosticLogsCluster : public ClusterBase
{
public:
    DiagnosticLogsCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::DiagnosticLogs::Id, endpoint)
    {}
    // DiagnosticLogsCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::DiagnosticLogs::Id, endpoint) {}
    ~DiagnosticLogsCluster() {}
};

class DLL_EXPORT DoorLockCluster : public ClusterBase
{
public:
    DoorLockCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::DoorLock::Id, endpoint)
    {}
    // DoorLockCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::DoorLock::Id, endpoint) {}
    ~DoorLockCluster() {}
};

class DLL_EXPORT ElectricalMeasurementCluster : public ClusterBase
{
public:
    ElectricalMeasurementCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::ElectricalMeasurement::Id,
                    endpoint)
    {}
    // ElectricalMeasurementCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::ElectricalMeasurement::Id, endpoint) {}
    ~ElectricalMeasurementCluster() {}
};

class DLL_EXPORT EthernetNetworkDiagnosticsCluster : public ClusterBase
{
public:
    EthernetNetworkDiagnosticsCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(),
                    app::Clusters::EthernetNetworkDiagnostics::Id, endpoint)
    {}
    // EthernetNetworkDiagnosticsCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::EthernetNetworkDiagnostics::Id, endpoint) {}
    ~EthernetNetworkDiagnosticsCluster() {}
};

class DLL_EXPORT FanControlCluster : public ClusterBase
{
public:
    FanControlCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::FanControl::Id, endpoint)
    {}
    // FanControlCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::FanControl::Id, endpoint) {}
    ~FanControlCluster() {}
};

class DLL_EXPORT FixedLabelCluster : public ClusterBase
{
public:
    FixedLabelCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::FixedLabel::Id, endpoint)
    {}
    // FixedLabelCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::FixedLabel::Id, endpoint) {}
    ~FixedLabelCluster() {}
};

class DLL_EXPORT FlowMeasurementCluster : public ClusterBase
{
public:
    FlowMeasurementCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::FlowMeasurement::Id, endpoint)
    {}
    // FlowMeasurementCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::FlowMeasurement::Id, endpoint) {}
    ~FlowMeasurementCluster() {}
};

class DLL_EXPORT GeneralCommissioningCluster : public ClusterBase
{
public:
    GeneralCommissioningCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::GeneralCommissioning::Id,
                    endpoint)
    {}
    // GeneralCommissioningCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint)
    // : ClusterBase(exchangeManager, session, app::Clusters::GeneralCommissioning::Id, endpoint) {}
    ~GeneralCommissioningCluster() {}
};

class DLL_EXPORT GeneralDiagnosticsCluster : public ClusterBase
{
public:
    GeneralDiagnosticsCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::GeneralDiagnostics::Id,
                    endpoint)
    {}
    // GeneralDiagnosticsCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::GeneralDiagnostics::Id, endpoint) {}
    ~GeneralDiagnosticsCluster() {}
};

class DLL_EXPORT GroupKeyManagementCluster : public ClusterBase
{
public:
    GroupKeyManagementCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::GroupKeyManagement::Id,
                    endpoint)
    {}
    // GroupKeyManagementCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::GroupKeyManagement::Id, endpoint) {}
    ~GroupKeyManagementCluster() {}
};

class DLL_EXPORT GroupsCluster : public ClusterBase
{
public:
    GroupsCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::Groups::Id, endpoint)
    {}
    // GroupsCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::Groups::Id, endpoint) {}
    ~GroupsCluster() {}
};

class DLL_EXPORT IdentifyCluster : public ClusterBase
{
public:
    IdentifyCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::Identify::Id, endpoint)
    {}
    // IdentifyCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::Identify::Id, endpoint) {}
    ~IdentifyCluster() {}
};

class DLL_EXPORT IlluminanceMeasurementCluster : public ClusterBase
{
public:
    IlluminanceMeasurementCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::IlluminanceMeasurement::Id,
                    endpoint)
    {}
    // IlluminanceMeasurementCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::IlluminanceMeasurement::Id, endpoint) {}
    ~IlluminanceMeasurementCluster() {}
};

class DLL_EXPORT KeypadInputCluster : public ClusterBase
{
public:
    KeypadInputCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::KeypadInput::Id, endpoint)
    {}
    // KeypadInputCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::KeypadInput::Id, endpoint) {}
    ~KeypadInputCluster() {}
};

class DLL_EXPORT LevelControlCluster : public ClusterBase
{
public:
    LevelControlCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::LevelControl::Id, endpoint)
    {}
    // LevelControlCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::LevelControl::Id, endpoint) {}
    ~LevelControlCluster() {}
};

class DLL_EXPORT LocalizationConfigurationCluster : public ClusterBase
{
public:
    LocalizationConfigurationCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::LocalizationConfiguration::Id,
                    endpoint)
    {}
    // LocalizationConfigurationCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::LocalizationConfiguration::Id, endpoint) {}
    ~LocalizationConfigurationCluster() {}
};

class DLL_EXPORT LowPowerCluster : public ClusterBase
{
public:
    LowPowerCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::LowPower::Id, endpoint)
    {}
    // LowPowerCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::LowPower::Id, endpoint) {}
    ~LowPowerCluster() {}
};

class DLL_EXPORT MediaInputCluster : public ClusterBase
{
public:
    MediaInputCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::MediaInput::Id, endpoint)
    {}
    // MediaInputCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::MediaInput::Id, endpoint) {}
    ~MediaInputCluster() {}
};

class DLL_EXPORT MediaPlaybackCluster : public ClusterBase
{
public:
    MediaPlaybackCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::MediaPlayback::Id, endpoint)
    {}
    // MediaPlaybackCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::MediaPlayback::Id, endpoint) {}
    ~MediaPlaybackCluster() {}
};

class DLL_EXPORT ModeSelectCluster : public ClusterBase
{
public:
    ModeSelectCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::ModeSelect::Id, endpoint)
    {}
    // ModeSelectCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::ModeSelect::Id, endpoint) {}
    ~ModeSelectCluster() {}
};

class DLL_EXPORT NetworkCommissioningCluster : public ClusterBase
{
public:
    NetworkCommissioningCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::NetworkCommissioning::Id,
                    endpoint)
    {}
    // NetworkCommissioningCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint)
    // : ClusterBase(exchangeManager, session, app::Clusters::NetworkCommissioning::Id, endpoint) {}
    ~NetworkCommissioningCluster() {}
};

class DLL_EXPORT OtaSoftwareUpdateProviderCluster : public ClusterBase
{
public:
    OtaSoftwareUpdateProviderCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::OtaSoftwareUpdateProvider::Id,
                    endpoint)
    {}
    // OtaSoftwareUpdateProviderCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::OtaSoftwareUpdateProvider::Id, endpoint) {}
    ~OtaSoftwareUpdateProviderCluster() {}
};

class DLL_EXPORT OtaSoftwareUpdateRequestorCluster : public ClusterBase
{
public:
    OtaSoftwareUpdateRequestorCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(),
                    app::Clusters::OtaSoftwareUpdateRequestor::Id, endpoint)
    {}
    // OtaSoftwareUpdateRequestorCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::OtaSoftwareUpdateRequestor::Id, endpoint) {}
    ~OtaSoftwareUpdateRequestorCluster() {}
};

class DLL_EXPORT OccupancySensingCluster : public ClusterBase
{
public:
    OccupancySensingCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::OccupancySensing::Id,
                    endpoint)
    {}
    // OccupancySensingCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::OccupancySensing::Id, endpoint) {}
    ~OccupancySensingCluster() {}
};

class DLL_EXPORT OnOffCluster : public ClusterBase
{
public:
    OnOffCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::OnOff::Id, endpoint)
    {}
    // OnOffCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::OnOff::Id, endpoint) {}
    ~OnOffCluster() {}
};

class DLL_EXPORT OnOffSwitchConfigurationCluster : public ClusterBase
{
public:
    OnOffSwitchConfigurationCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::OnOffSwitchConfiguration::Id,
                    endpoint)
    {}
    // OnOffSwitchConfigurationCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::OnOffSwitchConfiguration::Id, endpoint) {}
    ~OnOffSwitchConfigurationCluster() {}
};

class DLL_EXPORT OperationalCredentialsCluster : public ClusterBase
{
public:
    OperationalCredentialsCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::OperationalCredentials::Id,
                    endpoint)
    {}
    // OperationalCredentialsCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::OperationalCredentials::Id, endpoint) {}
    ~OperationalCredentialsCluster() {}
};

class DLL_EXPORT PowerSourceCluster : public ClusterBase
{
public:
    PowerSourceCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::PowerSource::Id, endpoint)
    {}
    // PowerSourceCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::PowerSource::Id, endpoint) {}
    ~PowerSourceCluster() {}
};

class DLL_EXPORT PowerSourceConfigurationCluster : public ClusterBase
{
public:
    PowerSourceConfigurationCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::PowerSourceConfiguration::Id,
                    endpoint)
    {}
    // PowerSourceConfigurationCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::PowerSourceConfiguration::Id, endpoint) {}
    ~PowerSourceConfigurationCluster() {}
};

class DLL_EXPORT PressureMeasurementCluster : public ClusterBase
{
public:
    PressureMeasurementCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::PressureMeasurement::Id,
                    endpoint)
    {}
    // PressureMeasurementCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint)
    // : ClusterBase(exchangeManager, session, app::Clusters::PressureMeasurement::Id, endpoint) {}
    ~PressureMeasurementCluster() {}
};

class DLL_EXPORT PumpConfigurationAndControlCluster : public ClusterBase
{
public:
    PumpConfigurationAndControlCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(),
                    app::Clusters::PumpConfigurationAndControl::Id, endpoint)
    {}
    // PumpConfigurationAndControlCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::PumpConfigurationAndControl::Id, endpoint) {}
    ~PumpConfigurationAndControlCluster() {}
};

class DLL_EXPORT RelativeHumidityMeasurementCluster : public ClusterBase
{
public:
    RelativeHumidityMeasurementCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(),
                    app::Clusters::RelativeHumidityMeasurement::Id, endpoint)
    {}
    // RelativeHumidityMeasurementCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::RelativeHumidityMeasurement::Id, endpoint) {}
    ~RelativeHumidityMeasurementCluster() {}
};

class DLL_EXPORT ScenesCluster : public ClusterBase
{
public:
    ScenesCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::Scenes::Id, endpoint)
    {}
    // ScenesCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::Scenes::Id, endpoint) {}
    ~ScenesCluster() {}
};

class DLL_EXPORT SoftwareDiagnosticsCluster : public ClusterBase
{
public:
    SoftwareDiagnosticsCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::SoftwareDiagnostics::Id,
                    endpoint)
    {}
    // SoftwareDiagnosticsCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint)
    // : ClusterBase(exchangeManager, session, app::Clusters::SoftwareDiagnostics::Id, endpoint) {}
    ~SoftwareDiagnosticsCluster() {}
};

class DLL_EXPORT SwitchCluster : public ClusterBase
{
public:
    SwitchCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::Switch::Id, endpoint)
    {}
    // SwitchCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::Switch::Id, endpoint) {}
    ~SwitchCluster() {}
};

class DLL_EXPORT TargetNavigatorCluster : public ClusterBase
{
public:
    TargetNavigatorCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::TargetNavigator::Id, endpoint)
    {}
    // TargetNavigatorCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::TargetNavigator::Id, endpoint) {}
    ~TargetNavigatorCluster() {}
};

class DLL_EXPORT TemperatureMeasurementCluster : public ClusterBase
{
public:
    TemperatureMeasurementCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::TemperatureMeasurement::Id,
                    endpoint)
    {}
    // TemperatureMeasurementCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::TemperatureMeasurement::Id, endpoint) {}
    ~TemperatureMeasurementCluster() {}
};

class DLL_EXPORT TestClusterCluster : public ClusterBase
{
public:
    TestClusterCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::TestCluster::Id, endpoint)
    {}
    // TestClusterCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::TestCluster::Id, endpoint) {}
    ~TestClusterCluster() {}
};

class DLL_EXPORT ThermostatCluster : public ClusterBase
{
public:
    ThermostatCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::Thermostat::Id, endpoint)
    {}
    // ThermostatCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::Thermostat::Id, endpoint) {}
    ~ThermostatCluster() {}
};

class DLL_EXPORT ThermostatUserInterfaceConfigurationCluster : public ClusterBase
{
public:
    ThermostatUserInterfaceConfigurationCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(),
                    app::Clusters::ThermostatUserInterfaceConfiguration::Id, endpoint)
    {}
    // ThermostatUserInterfaceConfigurationCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session,
    // EndpointId endpoint) : ClusterBase(exchangeManager, session, app::Clusters::ThermostatUserInterfaceConfiguration::Id,
    // endpoint) {}
    ~ThermostatUserInterfaceConfigurationCluster() {}
};

class DLL_EXPORT ThreadNetworkDiagnosticsCluster : public ClusterBase
{
public:
    ThreadNetworkDiagnosticsCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::ThreadNetworkDiagnostics::Id,
                    endpoint)
    {}
    // ThreadNetworkDiagnosticsCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::ThreadNetworkDiagnostics::Id, endpoint) {}
    ~ThreadNetworkDiagnosticsCluster() {}
};

class DLL_EXPORT TimeFormatLocalizationCluster : public ClusterBase
{
public:
    TimeFormatLocalizationCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::TimeFormatLocalization::Id,
                    endpoint)
    {}
    // TimeFormatLocalizationCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::TimeFormatLocalization::Id, endpoint) {}
    ~TimeFormatLocalizationCluster() {}
};

class DLL_EXPORT UnitLocalizationCluster : public ClusterBase
{
public:
    UnitLocalizationCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::UnitLocalization::Id,
                    endpoint)
    {}
    // UnitLocalizationCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::UnitLocalization::Id, endpoint) {}
    ~UnitLocalizationCluster() {}
};

class DLL_EXPORT UserLabelCluster : public ClusterBase
{
public:
    UserLabelCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::UserLabel::Id, endpoint)
    {}
    // UserLabelCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::UserLabel::Id, endpoint) {}
    ~UserLabelCluster() {}
};

class DLL_EXPORT WakeOnLanCluster : public ClusterBase
{
public:
    WakeOnLanCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::WakeOnLan::Id, endpoint)
    {}
    // WakeOnLanCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::WakeOnLan::Id, endpoint) {}
    ~WakeOnLanCluster() {}
};

class DLL_EXPORT WiFiNetworkDiagnosticsCluster : public ClusterBase
{
public:
    WiFiNetworkDiagnosticsCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::WiFiNetworkDiagnostics::Id,
                    endpoint)
    {}
    // WiFiNetworkDiagnosticsCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId
    // endpoint) : ClusterBase(exchangeManager, session, app::Clusters::WiFiNetworkDiagnostics::Id, endpoint) {}
    ~WiFiNetworkDiagnosticsCluster() {}
};

class DLL_EXPORT WindowCoveringCluster : public ClusterBase
{
public:
    WindowCoveringCluster(DeviceProxy * device, EndpointId endpoint) :
        ClusterBase(*device->GetExchangeManager(), device->GetSecureSession().Value(), app::Clusters::WindowCovering::Id, endpoint)
    {}
    // WindowCoveringCluster(Messaging::ExchangeManager & exchangeManager, const SessionHandle & session, EndpointId endpoint) :
    // ClusterBase(exchangeManager, session, app::Clusters::WindowCovering::Id, endpoint) {}
    ~WindowCoveringCluster() {}
};

} // namespace Controller
} // namespace chip
